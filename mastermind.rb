require "colorize"

=begin
I'm going to make a mastermind game. 6 colors, blanks availability simulated by having an extra color.
 ex : white, red, yellow, green, blue, cyan, magenta

When the computer is the codemaker,
There's going to be a max of 12 guesses for the player
The computer randomly selects colors and sequence for the 4 pegs.
The player is asked to guess the secret key.
The computer checks the guess and awards a black peg for every guess that has a correct color and plance.
it then awards a white peg for any other correct color, but wrong place.

There's a codemaker class that has the secret key array with size 4.
ex :  ["magenta", "red", "blue", "black"]
the codemaker will have a #check method to give the clue
ex : ["black, "white", "white", "white"]
there will be a #make_key method to generate a key
#make_key can be randomly generated by the computer

There's a codebreaker class that can  #make_guess with an array of size 4
ex :  ["magenta", "red", "blue", "black"]


steps:
1. create the codemaker class that can #make_key and can #check and can keep track of turns
2. create the codebreaker class for a human to play
3. allow the human to play codemaker too
4. allow the computer to play the codebreaker too
5. make the computer somewhat smart in the play

the checking goes like this.
there is a guess array of 4 colors
there is a secret array of 4 colors
the first color of the guess array is checked against the first color of the secret
if it matches, that's one black peg
and the element in the secret is changed to black to denote that it has been used up
then g2 is checked against the s2. if matched -> black peg and s2 = black
then g3 is checked against s3. if match -> black peg and s3 = black
then g4 is checked against s4. if match -> black peg and s4 = black
then g1 is checked if it still included in secret, if yes -> white peg
then g2 is checked if it is still included in secret, if yes -> white peg
then g3 is checked if it's included in secret, if yes -> white peg
then g4 is checked if it's included in secret, if yes -> white peg
the array of pegs are returned


how will it be if it were the computer as CodeBreaker?
it will first choose all white wwww
if bbbb -> win!
if bbb -> wwwx
if bb -> wwxx
if b -> wxxx
then no whites, proceed to next color

if wwwx  == bbb then keep changing last color
if wwwx == bbw ...  hmmm ... this is becoming weird.. hehehe


=end

class CodeMaker


  def initialize()
    @secret = Array.new
    @clue = []
  end


  def generate_secret
    4.times do
      c = rand(1..7)
      convert_to_color(c)
    end
    @secret
  end

  def check(guess)
    @clue = []
    temp = @secret.join(" ")
    temp = temp.split()
    # p ""
    # p temp
    # p guess
    guess.each_with_index do |e, i|
      if temp.include?(e) && temp[i] == e
        @clue << "black"
        temp[i] = "black"
        # p temp
      end
    end

    guess.each do |e|
      if temp.include?(e)
        @clue << "white"
        temp[ temp.index(e) ] = "black"
        p temp

      end
    end

    @clue
    @clue.sort
  end


  private

    def convert_to_color(c)
      case c
      when 1 then @secret.push ("white")
      when 2 then @secret.push ("red")
      when 3 then @secret.push ("yellow")
      when 4 then @secret.push ("green")
      when 5 then @secret.push ("blue")
      when 6 then @secret.push ("cyan")
      when 7 then @secret.push ("magenta")
      end
    end


end



class CodeBreaker

  def initialize
    @guess = Array.new(4)
  end

  def guess=(g)
    arr = g.strip.split("")
    @guess = []
    convert_to_color arr[0]
    convert_to_color arr[1]
    convert_to_color arr[2]
    convert_to_color arr[3]


  end

  def guess()
    @guess
  end

  private

  def convert_to_color(c)
    case c
    when "w" then @guess << "white"
    when "r" then @guess << "red"
    when "y" then @guess << "yellow"
    when "g" then @guess << "green"
    when "c" then @guess << "cyan"
    when "b" then @guess << "blue"
    when "m" then @guess << "magenta"
    end
  end

end



cm = CodeMaker.new
cm.generate_secret
cb = CodeBreaker.new


# p cb.guess = "ggbb"
# p cb.guess
# p cm.check(cb.guess)


def instructions
  puts "the colors available are: " + " white ".black.on_white + " red ".on_red +
      " yellow ".on_yellow + " green ".on_green.black + " blue ".on_blue +
      " cyan ".on_cyan.black + " magenta ".on_magenta

  puts "the available choices are: w, r, y, g, b, c and m. put x to exit"
  puts "e.g.  ggwb  for green green white blue"

end


def show_guess(g)
  g = g.strip.downcase.split("")
  g.each do |c|
    case c
    when "w" then print "white".on_white.black
    when "r" then print " red ".on_red
    when "y" then print "yellow".on_yellow
    when "g" then print "green".on_green.black
    when "c" then print " cyan ".on_cyan.black
    when "b" then print " blue ".on_blue
    when "m" then print "magenta".on_magenta
    end
  end
end


def show_clue(clue)
  clue.each do |c|
    case c
    when "white" then print " white ".on_white.black
    when "black" then print " black ".on_black.white

    end
  end

end



12.times do |i|

  puts instructions

  guess = gets.chomp.strip
  exit if guess == "x"
  show_guess(guess)
  cb.guess = guess

  clue = cm.check(cb.guess)
  puts ""
  puts ""
  show_clue(clue)
  puts " - round #{i}"
  puts ""
end
